# -*- coding: utf-8 -*-
"""Screening System with ml

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u5u63YPZR37690Lffpxz_ijI-fIdOzJt
"""

# resume_training_ml.py
# Train a resume classifier using TF-IDF + Random Forest (instead of BiLSTM)

import pandas as pd
import numpy as np
import re
import nltk
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.utils import class_weight
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# 📦 Setup
nltk.download('stopwords')
nltk.download('wordnet')
stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()



def clean_text(text):
    if not isinstance(text, str):
        return ""
    text = re.sub(r'[^a-zA-Z]', ' ', text)
    text = text.lower().split()
    return ' '.join([lemmatizer.lemmatize(word) for word in text if word not in stop_words])

# ---------------------------------------------
# 📁 Load dataset
df = pd.read_csv("UpdatedResumeDataSet_Balanced.csv")
df["Resume_str"] = df["Resume_str"].fillna("")
df["Cleaned_Resume"] = df["Resume_str"].apply(clean_text)

# 🎯 Encode target labels
le = LabelEncoder()
df["Category_ID"] = le.fit_transform(df["Category"])

print(df['Category'].value_counts())

# 🔀 Train/test split
X = df["Cleaned_Resume"]
y = df["Category_ID"]
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

# ---------------------------------------------
# 🧠 Build TF-IDF + Random Forest pipeline
pipeline = Pipeline([
    ("tfidf", TfidfVectorizer(max_features=5000, ngram_range=(1, 2))),
    ("clf", RandomForestClassifier(n_estimators=200, class_weight="balanced", random_state=42))
])

# 🚀 Train model
pipeline.fit(X_train, y_train)

# 💾 Save model and label encoder
with open("resume_classifier_ml.pkl", "wb") as f:
    pickle.dump(pipeline, f)

with open("label_encoder.pickle", "wb") as f:
    pickle.dump(le, f)

# 📊 Evaluate
y_pred = pipeline.predict(X_test)
print("\n✅ Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=le.classes_))

